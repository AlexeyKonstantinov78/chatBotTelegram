package ru.alekseykonstantinov.utilites;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.User;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

@Slf4j
public class Utilities {
    public static final List<String> messageGreeting =
            Arrays.asList("–ü—Ä–∏–≤–µ—Ç", "Hello", "–•–∞–π", "–°–∞–ª—é—Ç", "–î–æ–±—Ä—ã–π", "–î–æ–±—Ä–æ–µ", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–ó–¥–æ—Ä–æ–≤–∞",
                    "–ü—Ä–∏–≤–µ—Ç–∏–∫", "–î–∞—Ä–æ–≤–∞", "–•—ç–ª–ª–æ", "‚úãüèª", "üññüèª", "–î—Ä–∞—Ç—É—Ç–∏", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫");
    public static final List<String> messageFormsOfFarewell =
            Arrays.asList("–ü–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–¥–æ –≤–µ—á–µ—Ä–∞", "–¥–æ –∑–∞–≤—Ç—Ä–∞", "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ",
                    "–ë—ã–≤–∞–π", "–ß–∞–æ", "–ü–æ–∫–µ–¥–∞", "–£–≤–∏–¥–∏–º—Å—è", "–†–∞–∑—Ä–µ—à–∏—Ç–µ –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è", "–°—á–∞—Å—Ç–ª–∏–≤–æ", "–í—Å—ë –ø–æ–∫–∞", "–ê–¥—å—ë—Å", "–ë–∞–π",
                    "–î–æ —Å–≤—è–∑–∏", "–î–æ —Å–∫–æ—Ä–æ–≥–æ", "–ë–µ–≥—É", "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è", "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫–æ–π–Ω—ã–π –Ω–æ—á–∏", "–î–æ–±—Ä–æ–π –Ω–æ—á–∏");

    public static final List<String> messageCompliments = Arrays.asList(
            "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ —Å–µ–≥–æ–¥–Ω—è",
            "–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞",
            "–¢—ã –æ—á–µ–Ω—å —É–º–Ω—ã–π –∏ —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "–° —Ç–æ–±–æ–π –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è",
            "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –æ–∫—Ä—É–∂–∞—é—â–∏—Ö",
            "–£ —Ç–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–∫—É—Å",
            "–¢—ã –æ—á–µ–Ω—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫",
            "–¢—ã –∏–∑–ª—É—á–∞–µ—à—å –ø–æ–∑–∏—Ç–∏–≤",
            "–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏",
            "–£ —Ç–µ–±—è charming —É–ª—ã–±–∫–∞",
            "–¢—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥—Ä—É–≥",
            "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ",
            "–¢—ã –æ—á–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
            "–° —Ç–æ–±–æ–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ä—è–¥–æ–º",
            "–¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –ª—É—á—à–µ",
            "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞",
            "–¢—ã –æ—á–µ–Ω—å —É–º–Ω—ã–π",
            "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∏–ª—å",
            "–ö–ª–∞—Å—Å–Ω–∞—è —É–ª—ã–±–∫–∞",
            "–¢—ã –æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π",
            "–¢—ã —Å–∏—è–µ—à—å",
            "–¢—ã –º–æ–ª–æ–¥–µ—Ü",
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å",
            "–¢—ã —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π",
            "–¢—ã –æ—á–µ–Ω—å –¥–æ–±—Ä—ã–π",
            "–¢—ã —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤",
            "–¢—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π",
            "–¢—ã –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞",
            "–¢—ã –∫–ª–∞—Å—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫",
            "–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å",
            "–¢—ã –±—ã—Å—Ç—Ä–æ —Å–æ–æ–±—Ä–∞–∂–∞–µ—à—å",
            "–¢—ã –æ—á–µ–Ω—å –º–∏–ª–∞—è",
            "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å —Å–Ω–æ–≥—Å—à–∏–±–∞—Ç–µ–ª—å–Ω–æ",
            "–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä",
            "–¢—ã —É–º–Ω–∏—á–∫–∞",
            "–¢—ã —É–º–Ω—ã–π",
            "–ö—Ä–∞—Å–∞–≤—á–∏–∫"
    );

    public static final List<String> expressionGratitude = Arrays.asList(
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é",
            "–°–ø–∞—Å–∏–±–æ",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞"
    );

    public static String getRandomExpressionGratitude() {
        return expressionGratitude.get(ThreadLocalRandom.current().nextInt(0, expressionGratitude.size()));
    }

    /**
     * @param user —é–∑–µ—Ä
     *             –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ —Ç–∏–ø–∞ toString()
     */
    public static String getUserData(User user) {
        StringBuilder sb = new StringBuilder();
        sb.append("id: {}" + user.getId() + " ");
        sb.append("firstName: " + user.getFirstName() + " ");
        sb.append("isBot: " + user.getIsBot() + " ");
        sb.append("userName: " + user.getUserName() + " ");

        return sb.toString();
    }

    /**
     * –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ json —Ñ–æ—Ä–º–∞—Ç
     *
     * @param update —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏—è
     * @return –≤–æ–∑–≤—Ä–∞—Ç –≤ json —Ñ–æ—Ä–º–∞—Ç–µ
     */
    public static <T> String toPrettyJson(T update) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(update);
    }

    public static Boolean getIsMessageArrays(String message, List<String> list) {
        List<String> arrMessage = List.of(message.split("\\s+"));
        //log.info(arrMessage.toString());
        return arrMessage.stream().anyMatch(mess -> list.stream().anyMatch(mess::equalsIgnoreCase));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –º–∞—Å—Å–∏–≤–æ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
     *
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param list    —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
     * @return Boolean
     */
    public static Boolean getIsMessageArraysForms(String message, List<String> list) {
        return list.stream()
                .anyMatch(word -> message.toLowerCase().contains(word.toLowerCase()));
    }

}
